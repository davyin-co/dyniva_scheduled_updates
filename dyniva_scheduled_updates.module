<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\node\Entity\Node;
use Drupal\scheduled_updates\ScheduledUpdateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\scheduled_updates\Entity\ScheduledUpdate;

/**
 * hook_entity_update.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function dyniva_scheduled_updates_entity_update(EntityInterface $entity) {
  if($entity instanceof ScheduledUpdate && $entity->bundle() == 'scheduled_content_state') {
    if($entity->status->value == ScheduledUpdateInterface::STATUS_SUCCESSFUL) {
      $nodes = $entity->entity_ids->referencedEntities();
      $moderation_info = \Drupal::service('content_moderation.moderation_information');
      foreach($nodes as $node) {
        if($node->moderation_state->value == $entity->field_state->value) continue;
        // 通知发布者
        if(\Drupal::moduleHandler()->moduleExists('dyniva_message')) {
          if ($moderation_info->isModeratedEntity($node)) {
            /* @var \Drupal\workflows\WorkflowInterface $workflow */
            $workflow = $moderation_info->getWorkflowForEntity($node);
            try {
              $transition = $workflow
                ->getTypePlugin()
                ->getTransitionFromStateToState($node->moderation_state->value, $entity->field_state->value);
            } catch(\Exception $e) {
              watchdog_exception('dyniva_scheduled_updates', $e);
              $transition = NULL;
            }
            if($transition) {
              $node_type = \Drupal::entityTypeManager()->getStorage('node_type')->load($node->bundle());
              $message = \Drupal\message\Entity\Message::create(['template' => 'content_moderation', 'uid' => 0]);
              if($message->hasField('content_ref')){
                $message->content_ref = $node;
              }
              $message->content_title = $node->label();
              $message->content_id = $node->id();
              $message->content_type = $node_type->label();
              $message->account_ref = 0;
              $message->transition = $transition->id();

              $message->save();
              dyniva_message_send_message($node, $message);
            }
          }

        }
        // Change node
        $node->moderation_state->setValue($entity->field_state->value);
        if($entity->field_state->value == 'published') {
          $node->status = 1;
        }
        if($entity->field_state->value == 'unpublished') {
          $node->status = 0;
        }
        $node->save();

        \Drupal::logger('dyniva_scheduled_updates')
          ->notice("node @node change state to @state", [
            '@node' => $node->id(),
            '@state' => $entity->field_state->value
          ]);
      }
    }
  }
}

/**
 * Provide a form-specific alteration instead of the global hook_form_alter().
 *
 * @see hook_form_alter()
 * @see hook_form_BASE_FORM_ID_alter()
 * @see \Drupal\Core\Form\FormBuilderInterface::prepareForm()
 */
function dyniva_scheduled_updates_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /* @var \Drupal\node\Entity\Node $entity */
  $entity = $form_state->getFormObject()->getEntity();

  // Schedule sticky
  $date = new DrupalDateTime();
  $date->setTime(0, 0);
  $date->modify('+1 month');

  if(!$entity->isNew()){
    if($update = dyniva_scheduled_updates_get_schedule_update($entity->id())){
      $date->setTimestamp($update->update_timestamp->value);
    }
  }

  $form['schedule_sticky'] = [
    '#group' => 'options',
    '#type' => 'datetime',
    '#title' => t('Schedule cancel sticky'),
    '#weight' => 99,
    '#default_value' => $date,
  ];
  $form['schedule_sticky']['#states'] = [
    'visible' => [
      ':input[name="sticky[value]"]' => ['checked' => true]
    ]
  ];

  // Schedule change state
  $typeConfig = \Drupal::service('entity.manager')
    ->getStorage('scheduled_update_type')
    ->load('scheduled_content_state')->toArray();
  $bundles = $typeConfig['update_runner']['bundles'] ?? [];
  if(isset($bundles[$entity->bundle()])) {
    /* @var \Drupal\workflows\Entity\Workflow $workflow */
    $workflow = \Drupal::service('content_moderation.moderation_information')->getWorkflowForEntity($entity);
    if($workflow) {
      $update = dyniva_scheduled_updates_get_schedule_update($entity->id(), 'scheduled_content_state');
      $options = [];
      if(\Drupal::moduleHandler()->moduleExists('ccms_core')) {
        // 兼容哈工大的发布/取消发布流程
        if(\Drupal::currentUser()->hasPermission('publish ccms '.$entity->bundle())) {
          if($entity->isNew()) {
            $options['published'] = t('Publish');
            $options['unpublished'] = t('Unpublish');
          } else {
            if($entity->isPublished()) {
              $options['unpublished'] = t('Unpublish');
            } else {
              $options['published'] = t('Publish');
            }
          }
        }
      } elseif(\Drupal::moduleHandler()->moduleExists('dyniva_core')) {
        if(\Drupal::currentUser()->hasPermission('manage ccms content moderation')) {
          if($entity->isNew()) {
            $options['published'] = t('Publish');
            $options['unpublished'] = t('Unpublish');
          } else {
            if ($entity->isPublished()) {
              $options['unpublished'] = t('Unpublish');
            }
            else {
              $options['published'] = t('Publish');
            }
          }
        }
      } else {
        $transitions = $workflow->toArray()['type_settings']['transitions'] ?? [];
        foreach($transitions as $transition) {
          if(
            $entity->moderation_state->value != $transition['to'] &&
            $transition['to'] != 'draft' &&
            in_array($entity->moderation_state->value, $transition['from'])
          ) {
            $options[$transition['to']] = $transition['label'];
          }
        }
      }
      if(count($options) > 0) {
        $form['change_state_options'] = [
          '#type' => 'details',
          '#title' => t('Schedule'),
          '#group' => 'advanced',
          '#optional' => true,
          '#weight' => 99
        ];
        $form['change_state_options']['schedule_state_enable'] = [
          '#group' => 'change_state_options',
          '#type' => 'checkbox',
          '#title' => t('Enable schedule')
        ];
        $form['change_state_options']['schedule_state_change_to'] = [
          '#group' => 'change_state_options',
          '#type' => 'select',
          '#options' => $options,
          '#states' => [
            'visible' => [
              ':input[name="schedule_state_enable"]' => ['checked' => true]
            ]
          ],
          '#default_value' => $entity->moderation_state->value
        ];
        $date = new DrupalDateTime();
        $date->setTime(0, 0);
        $date->modify('+1 month');
        if($update){
          $form['change_state_options']['schedule_state_enable']['#default_value'] = 1;
          $form['change_state_options']['schedule_state_change_to']['#default_value'] = $update->field_state->value;
          $date->setTimestamp($update->update_timestamp->value);
        }
        $form['change_state_options']['schedule_state'] = [
          '#group' => 'change_state_options',
          '#type' => 'datetime',
          '#states' => [
            'visible' => [
              ':input[name="schedule_state_enable"]' => ['checked' => true]
            ]
          ],
          '#default_value' => $date,
        ];
      }
    }

  }

  array_unshift($form['#submit'], 'dyniva_scheduled_updates_form_node_form_submit');
  foreach (array_keys($form['actions']) as $action) {
    if ($action != 'preview' &&
        isset($form['actions'][$action]['#type'])&&
        $form['actions'][$action]['#type'] === 'submit'&&
        !empty($form['actions'][$action]['#submit'])) {
      array_unshift($form['actions'][$action]['#submit'], 'dyniva_scheduled_updates_form_node_form_submit');
    }
  }
}
/**
 * Form submit.
 *
 * @param unknown $form
 * @param FormStateInterface $form_state
 */
function dyniva_scheduled_updates_form_node_form_submit(&$form, FormStateInterface $form_state) {
  /* @var \Drupal\node\Entity\Node $entity */
  $entity = $form_state->getFormObject()->getEntity();
  $entity->schedule_sticky = $form_state->getValue('schedule_sticky');

  if($form_state->getValue('schedule_state_enable')) {
      $entity->schedule_state_change_to = $form_state->getValue('schedule_state_change_to');
      $entity->schedule_state = $form_state->getValue('schedule_state');
  } else {
    $update = dyniva_scheduled_updates_get_schedule_update($entity->id(), 'scheduled_content_state');
    if($update) {
      $update->delete();
    }
  }
}
/**
 * Get scheduled_update entity.
 *
 * @param unknown $entity_id
 * @param string $type
 * @return \Drupal\Core\Entity\EntityInterface|NULL|NULL
 */
function dyniva_scheduled_updates_get_schedule_update($entity_id, $type = 'scheduled_content_sticky') {
  $entity_storage = \Drupal::entityTypeManager()->getStorage('scheduled_update');
  $query = $entity_storage->getQuery('AND');
  $query->condition('type', $type);
  $query->condition('entity_ids', $entity_id);
  $query->condition('status', ScheduledUpdateInterface::STATUS_UNRUN);
  $ids = $query->execute();
  if(!empty($ids)){
    return $entity_storage->load(reset($ids));
  }
  return NULL;
}
/**
 * Create scheduled_update entity.
 *
 * @param unknown $entity_id
 * @param string $type
 * @return \Drupal\Core\Entity\EntityInterface|NULL|NULL
 */
function dyniva_scheduled_updates_create_schedule_update($entity_id, $type = 'scheduled_content_sticky') {
  $entity_storage = \Drupal::entityTypeManager()->getStorage('scheduled_update');
  $values = [
    'type' => $type,
    'entity_ids' => [$entity_id],
    'status' => ScheduledUpdateInterface::STATUS_UNRUN
  ];
  $entity = $entity_storage->create($values);
  return $entity;
}
/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function dyniva_scheduled_updates_node_insert(Node $node) {
  dyniva_scheduled_updates_node_update($node);
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function dyniva_scheduled_updates_node_update(Node $node) {
  // Scheduled sticky
  if(!empty($node->schedule_sticky)) {
    if($node->isPublished() && !empty($node->sticky->value)) {
      $update = dyniva_scheduled_updates_get_schedule_update($node->id());
      if(!$update){
        $update = dyniva_scheduled_updates_create_schedule_update($node->id());
      }
      $update->update_timestamp = $node->schedule_sticky->getTimestamp();
      $update->status = ScheduledUpdateInterface::STATUS_UNRUN;
      $update->save();
    }
  }

  // Scheduled state
  if(!empty($node->schedule_state_change_to) && !empty($node->schedule_state)) {
    if($node->moderation_state->value != $node->schedule_state_change_to) {
      $update = dyniva_scheduled_updates_get_schedule_update($node->id(), 'scheduled_content_state');
      if(!$update) {
        $update = dyniva_scheduled_updates_create_schedule_update($node->id(), 'scheduled_content_state');
      }
      $update->update_timestamp = $node->schedule_state->getTimestamp();
      $update->status = ScheduledUpdateInterface::STATUS_UNRUN;
      $update->field_state->value = $node->schedule_state_change_to;
      $update->save();
    } else {
      // 如果更新后状态和定时状态一样，忽略与删除已有日程
      $update = dyniva_scheduled_updates_get_schedule_update($node->id(), 'scheduled_content_state');
      if($update) {
        $update->delete();
      }
    }
  }
}
